/**
 * This code was generated by a tool.
 * ility@0.0.3
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 */

export interface GizmoService {
  /**
   * Only has a summary
   * @param search
   */
  getGizmos(search?: string): Promise<GizmosResponse>;

  /**
   * Has a summary in addition to a description
   * Has a description in addition to a summary
   * @param size Anonymous enum
   */
  createGizmo(size?: CreateGizmoSize): Promise<Gizmo>;

  /**
   * @param factors array of primitive
   */
  updateGizmo(factors?: string[]): Promise<Gizmo>;
}

export interface WidgetService {
  getWidgets(): Promise<Widget>;

  /**
   * @param body The new widget
   */
  createWidget(body?: CreateWidgetBody): Promise<void>;

  putWidget(): Promise<void>;

  /**
   * @param id The widget ID
   */
  getWidgetFoo(id: string): Promise<Widget>;

  /**
   * @param id The widget ID
   */
  deleteWidgetFoo(id: string): Promise<void>;
}

export type CreateGizmoSize = 'small' | 'medium' | 'big' | 'XL';

export type Gizmo = {
  id?: string;
  name?: string;
};

export type Widget = {
  id: string;
  name?: string;
  fiz?: number;
  buzz?: number;
  fizbuzz?: number;
  foo?: WidgetFoo;
};

export type NewWidget = {
  name?: string;
  fiz?: number;
  buzz?: number;
  fizbuzz?: number;
  foo?: NewWidgetFoo;
};

export type GizmosResponse = {
  data: Gizmo[];
};

export type CreateWidgetBody = {
  name: string;
};

export type WidgetFoo = {
  fiz?: number;
  buzz: number;
};

export type NewWidgetFoo = {
  fiz?: number;
  buzz: number;
};
