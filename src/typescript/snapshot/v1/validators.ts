/**
 * This code was generated by a tool.
 * ility@0.0.3
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 */

import * as types from './types';

export type ValidationError = { code: string; title: string; path: string };

/**
 * Validates input parameters for the getGizmos() method.
 * @param search
 */
export function validateGetGizmosParams(search?: string): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof search !== 'undefined' && typeof search !== 'string') {
    errors.push({
      code: 'TYPE',
      title: '"search" must be a string if supplied',
      path: 'search',
    });
  }
  return errors;
}

/**
 * Validates input parameters for the createGizmo() method.
 * @param size Anonymous enum
 */
export function validateCreateGizmoParams(
  size?: types.CreateGizmoSize,
): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof size !== 'undefined') {
    for (const error of validateCreateGizmoSize(size)) {
      errors.push(error);
    }
  }
  if (
    typeof size === 'string' &&
    !['small', 'medium', 'big', 'XL'].includes(size)
  ) {
    errors.push({
      code: 'STRING_ENUM',
      title: '"size" must be one of ["small", "medium", "big", "XL"]',
      path: 'size',
    });
  }
  return errors;
}

/**
 * Validates input parameters for the updateGizmo() method.
 * @param factors array of primitive
 */
export function validateUpdateGizmoParams(
  factors?: string[],
): ValidationError[] {
  const errors: ValidationError[] = [];
  if (Array.isArray(factors) && factors.some((x) => typeof x !== 'string')) {
    errors.push({
      code: 'TYPE',
      title: 'Each item in "factors" must be a string if supplied',
      path: 'factors',
    });
  }
  if (Array.isArray(factors) && factors.length > 6) {
    errors.push({
      code: 'ARRAY_MAX_ITEMS',
      title: '"factors" max length is 6',
      path: 'factors',
    });
  }
  if (Array.isArray(factors) && factors.length < 2) {
    errors.push({
      code: 'ARRAY_MIN_ITEMS',
      title: '"factors" min length is 2',
      path: 'factors',
    });
  }
  if (
    Array.isArray(factors) &&
    !factors.some((x) => typeof x === 'string' && /[0-9a-fA-F]+/.test(x))
  ) {
    errors.push({
      code: 'STRING_PATTERN',
      title: 'Each item in "factors" must match the pattern /[0-9a-fA-F]+/',
      path: 'factors',
    });
  }
  return errors;
}

/**
 * Validates input parameters for the getWidgets() method.
 */
export function validateGetWidgetsParams(): ValidationError[] {
  return [];
}

/**
 * Validates input parameters for the createWidget() method.
 * @param body The new widget
 */
export function validateCreateWidgetParams(
  body?: types.CreateWidgetBody,
): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof body !== 'undefined') {
    for (const error of validateCreateWidgetBody(body)) {
      errors.push(error);
    }
  }
  return errors;
}

/**
 * Validates input parameters for the putWidget() method.
 */
export function validatePutWidgetParams(): ValidationError[] {
  return [];
}

/**
 * Validates input parameters for the getWidgetFoo() method.
 * @param id The widget ID
 */
export function validateGetWidgetFooParams(id: string): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof id === 'undefined') {
    errors.push({ code: 'REQUIRED', title: '"id" is required', path: 'id' });
  }
  if (typeof id !== 'undefined' && typeof id !== 'string') {
    errors.push({ code: 'TYPE', title: '"id" must be a string', path: 'id' });
  }
  if (typeof id === 'string' && id.length > 30) {
    errors.push({
      code: 'STRING_MAX_LENGTH',
      title: '"id" max length is 30',
      path: 'id',
    });
  }
  return errors;
}

/**
 * Validates input parameters for the deleteWidgetFoo() method.
 * @param id The widget ID
 */
export function validateDeleteWidgetFooParams(id: string): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof id === 'undefined') {
    errors.push({ code: 'REQUIRED', title: '"id" is required', path: 'id' });
  }
  if (typeof id !== 'undefined' && typeof id !== 'string') {
    errors.push({ code: 'TYPE', title: '"id" must be a string', path: 'id' });
  }
  if (typeof id === 'string' && id.length > 30) {
    errors.push({
      code: 'STRING_MAX_LENGTH',
      title: '"id" max length is 30',
      path: 'id',
    });
  }
  return errors;
}

export function validateGizmo({ id, name }: types.Gizmo): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof id !== 'undefined' && typeof id !== 'string') {
    errors.push({
      code: 'TYPE',
      title: '"id" must be a string if supplied',
      path: 'id',
    });
  }
  if (typeof id === 'string' && id.length > 30) {
    errors.push({
      code: 'STRING_MAX_LENGTH',
      title: '"id" max length is 30',
      path: 'id',
    });
  }
  if (typeof name !== 'undefined' && typeof name !== 'string') {
    errors.push({
      code: 'TYPE',
      title: '"name" must be a string if supplied',
      path: 'name',
    });
  }
  return errors;
}
export function isGizmo(obj: any): obj is types.Gizmo {
  return typeof obj !== 'undefined' && !validateGizmo(obj).length;
}

export function validateWidget({
  id,
  name,
  fiz,
  buzz,
  fizbuzz,
  foo,
}: types.Widget): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof id === 'undefined') {
    errors.push({ code: 'REQUIRED', title: '"id" is required', path: 'id' });
  }
  if (typeof id !== 'undefined' && typeof id !== 'string') {
    errors.push({ code: 'TYPE', title: '"id" must be a string', path: 'id' });
  }
  if (typeof id === 'string' && id.length > 30) {
    errors.push({
      code: 'STRING_MAX_LENGTH',
      title: '"id" max length is 30',
      path: 'id',
    });
  }
  if (typeof name !== 'undefined' && typeof name !== 'string') {
    errors.push({
      code: 'TYPE',
      title: '"name" must be a string if supplied',
      path: 'name',
    });
  }
  if (typeof name === 'string' && name.length > 30) {
    errors.push({
      code: 'STRING_MAX_LENGTH',
      title: '"name" max length is 30',
      path: 'name',
    });
  }
  if (typeof name === 'string' && /[0-9a-fA-F]+/.test(name)) {
    errors.push({
      code: 'STRING_PATTERN',
      title: '"name" must match the pattern /[0-9a-fA-F]+/',
      path: 'name',
    });
  }
  if (typeof fiz !== 'undefined' && typeof fiz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"fiz" must be a number if supplied',
      path: 'fiz',
    });
  }
  if (typeof fiz === 'number' && fiz % 3 !== 0) {
    errors.push({
      code: 'NUMBER_MULTIPLE_OF',
      title: '"fiz" must be a multiple of 3',
      path: 'fiz',
    });
  }
  if (typeof buzz !== 'undefined' && typeof buzz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"buzz" must be a number if supplied',
      path: 'buzz',
    });
  }
  if (typeof buzz === 'number' && buzz % 5 !== 0) {
    errors.push({
      code: 'NUMBER_MULTIPLE_OF',
      title: '"buzz" must be a multiple of 5',
      path: 'buzz',
    });
  }
  if (typeof fizbuzz !== 'undefined' && typeof fizbuzz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"fizbuzz" must be a number if supplied',
      path: 'fizbuzz',
    });
  }
  if (typeof fizbuzz === 'number' && fizbuzz % 15 !== 0) {
    errors.push({
      code: 'NUMBER_MULTIPLE_OF',
      title: '"fizbuzz" must be a multiple of 15',
      path: 'fizbuzz',
    });
  }
  if (typeof foo !== 'undefined') {
    for (const error of validateWidgetFoo(foo)) {
      errors.push(error);
    }
  }
  return errors;
}
export function isWidget(obj: any): obj is types.Widget {
  return typeof obj !== 'undefined' && !validateWidget(obj).length;
}

export function validateNewWidget({
  name,
  fiz,
  buzz,
  fizbuzz,
  foo,
}: types.NewWidget): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof name !== 'undefined' && typeof name !== 'string') {
    errors.push({
      code: 'TYPE',
      title: '"name" must be a string if supplied',
      path: 'name',
    });
  }
  if (typeof name === 'string' && name.length > 30) {
    errors.push({
      code: 'STRING_MAX_LENGTH',
      title: '"name" max length is 30',
      path: 'name',
    });
  }
  if (typeof name === 'string' && /[0-9a-fA-F]+/.test(name)) {
    errors.push({
      code: 'STRING_PATTERN',
      title: '"name" must match the pattern /[0-9a-fA-F]+/',
      path: 'name',
    });
  }
  if (typeof fiz !== 'undefined' && typeof fiz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"fiz" must be a number if supplied',
      path: 'fiz',
    });
  }
  if (typeof fiz === 'number' && fiz % 3 !== 0) {
    errors.push({
      code: 'NUMBER_MULTIPLE_OF',
      title: '"fiz" must be a multiple of 3',
      path: 'fiz',
    });
  }
  if (typeof buzz !== 'undefined' && typeof buzz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"buzz" must be a number if supplied',
      path: 'buzz',
    });
  }
  if (typeof buzz === 'number' && buzz % 5 !== 0) {
    errors.push({
      code: 'NUMBER_MULTIPLE_OF',
      title: '"buzz" must be a multiple of 5',
      path: 'buzz',
    });
  }
  if (typeof fizbuzz !== 'undefined' && typeof fizbuzz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"fizbuzz" must be a number if supplied',
      path: 'fizbuzz',
    });
  }
  if (typeof fizbuzz === 'number' && fizbuzz % 15 !== 0) {
    errors.push({
      code: 'NUMBER_MULTIPLE_OF',
      title: '"fizbuzz" must be a multiple of 15',
      path: 'fizbuzz',
    });
  }
  if (typeof foo !== 'undefined') {
    for (const error of validateNewWidgetFoo(foo)) {
      errors.push(error);
    }
  }
  return errors;
}
export function isNewWidget(obj: any): obj is types.NewWidget {
  return typeof obj !== 'undefined' && !validateNewWidget(obj).length;
}

export function validateGizmosResponse({
  data,
}: types.GizmosResponse): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof data === 'undefined') {
    errors.push({
      code: 'REQUIRED',
      title: '"data" is required',
      path: 'data',
    });
  }
  if (typeof data !== 'undefined') {
    for (const arrayItem of data) {
      for (const error of validateGizmo(arrayItem)) {
        errors.push(error);
      }
    }
  }
  return errors;
}
export function isGizmosResponse(obj: any): obj is types.GizmosResponse {
  return typeof obj !== 'undefined' && !validateGizmosResponse(obj).length;
}

export function validateCreateWidgetBody({
  name,
}: types.CreateWidgetBody): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof name === 'undefined') {
    errors.push({
      code: 'REQUIRED',
      title: '"name" is required',
      path: 'name',
    });
  }
  if (typeof name !== 'undefined' && typeof name !== 'string') {
    errors.push({
      code: 'TYPE',
      title: '"name" must be a string',
      path: 'name',
    });
  }
  return errors;
}
export function isCreateWidgetBody(obj: any): obj is types.CreateWidgetBody {
  return typeof obj !== 'undefined' && !validateCreateWidgetBody(obj).length;
}

export function validateWidgetFoo({
  fiz,
  buzz,
}: types.WidgetFoo): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof fiz !== 'undefined' && typeof fiz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"fiz" must be a number if supplied',
      path: 'fiz',
    });
  }
  if (typeof buzz === 'undefined') {
    errors.push({
      code: 'REQUIRED',
      title: '"buzz" is required',
      path: 'buzz',
    });
  }
  if (typeof buzz !== 'undefined' && typeof buzz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"buzz" must be a number',
      path: 'buzz',
    });
  }
  return errors;
}
export function isWidgetFoo(obj: any): obj is types.WidgetFoo {
  return typeof obj !== 'undefined' && !validateWidgetFoo(obj).length;
}

export function validateNewWidgetFoo({
  fiz,
  buzz,
}: types.NewWidgetFoo): ValidationError[] {
  const errors: ValidationError[] = [];
  if (typeof fiz !== 'undefined' && typeof fiz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"fiz" must be a number if supplied',
      path: 'fiz',
    });
  }
  if (typeof buzz === 'undefined') {
    errors.push({
      code: 'REQUIRED',
      title: '"buzz" is required',
      path: 'buzz',
    });
  }
  if (typeof buzz !== 'undefined' && typeof buzz !== 'number') {
    errors.push({
      code: 'TYPE',
      title: '"buzz" must be a number',
      path: 'buzz',
    });
  }
  return errors;
}
export function isNewWidgetFoo(obj: any): obj is types.NewWidgetFoo {
  return typeof obj !== 'undefined' && !validateNewWidgetFoo(obj).length;
}

export function validateCreateGizmoSize(
  createGizmoSize: types.CreateGizmoSize,
): ValidationError[] {
  const errors: ValidationError[] = [];
  if (
    typeof createGizmoSize === 'string' &&
    !['small', 'medium', 'big', 'XL'].includes(createGizmoSize)
  ) {
    errors.push({
      code: 'STRING_ENUM',
      title: 'Value must be one of ["small", "medium", "big", "XL"]',
      path: '',
    });
  }
  return [];
}
